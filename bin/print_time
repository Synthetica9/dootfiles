#!/usr/bin/env python3
import datetime
import numbers
from functools import lru_cache


# https://rosettacode.org/wiki/Levenshtein_distance
@lru_cache(maxsize=4095)
def ld(s, t):
    if not s:
        return len(t)
    if not t:
        return len(s)
    if s[0] == t[0]:
        return ld(s[1:], t[1:])

    l1 = ld(s, t[1:])
    l2 = ld(s[1:], t)
    l3 = ld(s[1:], t[1:])

    return 1 + min(l1, l2, l3)


def get_time() -> datetime.time:
    return datetime.datetime.now().time()


def format_time_split_raw(hour: int, minute: int) -> str:
    return "{}:{:0>2}".format(hour, minute)


def format_time_split(hour: int, minute: float) -> str:
    a = format_time_split_raw(13, 37)
    b = format_time_split_raw(hour, int(minute))
    if ld(a, b) <= 1 or sorted(a) == sorted(b):
        minute = int(minute)
    else:
        minute = integral_round(minute, 5)

    while minute >= 60:
        hour += 1  # TODO: divmod
        minute -= 60

    hour %= 24
    return format_time_split_raw(hour, minute)


def format_time(time: datetime.time = get_time()) -> str:
    hour = time.hour
    minute = time.minute + time.second / 60

    return format_time_split(hour, minute)


def integral_round(x: numbers.Number, base: int) -> int:
    return int(base * round(float(x)/base))


def main():
    print(format_time())
    # print(format_time_split(2, 37))

if __name__ == "__main__":
    main()
